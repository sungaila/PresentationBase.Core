# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

jobs:
- job: Build
  displayName: 'Build'
  pool:
    vmImage: 'windows-latest'
  steps:
  - task: DotNetCoreCLI@2
    displayName: 'Build solution'
    inputs:
      command: 'build'
      arguments: '-c $(buildConfiguration) -p:VersionSuffix=ci'
  - task: PublishPipelineArtifact@1
    displayName: 'Publish project assemblies'
    inputs:
      targetPath: '$(Build.SourcesDirectory)\Core\bin\$(buildConfiguration)'
      artifact: 'Assemblies ($(buildConfiguration))'
      publishLocation: 'pipeline'
  - task: PublishPipelineArtifact@1
    displayName: 'Publish test assemblies'
    inputs:
      targetPath: '$(Build.SourcesDirectory)\Core.Tests\bin\$(buildConfiguration)'
      artifact: 'Tests'
      publishLocation: 'pipeline'
  - task: DotNetCoreCLI@2
    displayName: 'Create NuGet package'
    inputs:
      command: 'pack'
      arguments: '-c $(buildConfiguration)'
      packagesToPack: '$(Build.SourcesDirectory)\Core\Core.csproj'
      nobuild: true
      versioningScheme: 'off'
      buildProperties: 'VersionSuffix=ci'
  - task: PublishPipelineArtifact@1
    displayName: 'Publish NuGet package'
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'
      artifact: 'NuGet package ($(buildConfiguration))'
      publishLocation: 'pipeline'
  
- job: Test
  displayName: 'Test'
  dependsOn: Build
  strategy:
    matrix:
      Windows:
        imageName: 'windows-latest'
      Linux:
        imageName: 'ubuntu-latest'
      macOS:
        imageName: 'macOS-latest'
  pool:
    vmImage: $(imageName)
  steps:
  - checkout: none
    displayName: 'Skip checkout'
  - task: DownloadPipelineArtifact@2
    displayName: 'Download test assemblies'
    inputs:
      buildType: 'current'
      artifactName: 'Tests'
      targetPath: '$(Pipeline.Workspace)'
  - task: VSTest@2
    displayName: 'Run tests'
    inputs:
      testSelector: 'testAssemblies'
      testAssemblyVer2: '$(Pipeline.Workspace)\**\net5.0\PresentationBase.Core.Tests.dll'
      searchFolder: '$(System.DefaultWorkingDirectory)'
      runTestsInIsolation: true
      codeCoverageEnabled: true
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'